{"version":3,"sources":["Components/SearchBar/SearchBar.js","Components/Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","onSubmit","onBtn","className","type","placeholder","onChange","onClick","Card","City","temp","feels_like","temp_max","temp_min","weather","name","App","event","setState","searchfield","target","value","fetch","state","then","response","json","user","Math","round","main","description","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sPAUeA,EARD,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,SAASC,EAAS,EAATA,MACrB,OACI,yBAAKC,UAAU,UACf,2BAAOA,UAAU,UAAUC,KAAK,OAAOC,YAAY,mBAAmBC,SAAUL,IAChF,4BAAQE,UAAU,2CAA2CI,QAASL,GAAtE,QCkBOM,EAvBN,SAAC,GAAoD,IAAnDC,EAAkD,EAAlDA,KAAKC,EAA6C,EAA7CA,KAAKC,EAAwC,EAAxCA,WAAWC,EAA6B,EAA7BA,SAASC,EAAoB,EAApBA,SAASC,EAAW,EAAXA,QAC9C,OACI,yBAAKX,UAAU,4CACf,yBAAKA,UAAU,WACf,4BAAK,QACL,2BAAIM,EAAKM,MACT,4BAAK,QACL,2BAAIL,EAAM,0BAAMP,UAAU,kBAA1B,KACA,4BAAK,aAAL,KACA,2BAAIQ,EAAY,0BAAMR,UAAU,kBAAhC,MAGA,yBAAKA,UAAU,WACf,uCACA,2BAAIS,EAAS,0BAAMT,UAAU,kBAA7B,KACA,uCACA,2BAAIU,EAAS,0BAAMV,UAAU,kBAA7B,KACA,uCACA,2BAAIW,MCiCGE,G,wDA7Cb,aAAc,IAAD,8BACX,gBAYFf,SAAS,SAACgB,GACR,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAd7B,EAgBbnB,MAAM,SAACe,GACJK,MAAM,oDAAD,OAAqD,EAAKC,MAAMJ,YAAhE,4CAAsHK,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACnJF,MAAK,SAACG,GACX,EAAKT,SAAS,CAACT,KAAKkB,EAClBjB,KAAKkB,KAAKC,MAAMF,EAAKG,KAAKpB,KAAK,QAE/BC,WAAWiB,KAAKC,MAAMF,EAAKG,KAAKnB,WAAY,QAC3CC,SAASgB,KAAKC,MAAMF,EAAKG,KAAKlB,SAAU,QACvCC,SAASe,KAAKC,MAAMF,EAAKG,KAAKjB,SAAU,QACvCC,QAAQa,EAAKb,QAAQ,GAAGiB,cAE7BC,QAAQC,IAAI,EAAKV,MAAMd,UAzBnB,EAAKc,MAAM,CACTJ,YAAY,GACZV,KAAK,GACLC,KAAK,GACLC,WAAW,GACXC,SAAS,GACTC,SAAS,GACTC,QAAQ,IATC,E,qDAmCb,OACE,yBAAKX,UAAU,UACf,4BAAK,eACL,kBAAC,EAAD,CAAWD,MAAOgC,KAAKhC,MAAOD,SAAUiC,KAAKjC,WAC7C,kBAAC,EAAD,CAAMQ,KAAMyB,KAAKX,MAAMd,KAAMC,KAAMwB,KAAKX,MAAMb,KAAMC,WAAYuB,KAAKX,MAAMZ,WAAYC,SAAUsB,KAAKX,MAAMX,SAAUC,SAAUqB,KAAKX,MAAMV,SAAUC,QAASoB,KAAKX,MAAMT,UAC3K,uE,GAzCgBqB,c,MCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,a","file":"static/js/main.a3b378a0.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nlet SearchBar=({onSubmit,onBtn})=>{\r\n    return(\r\n        <div className=\"ma3 tc\">\r\n        <input className=\"ma1 pa2\" type=\"text\" placeholder=\"search city here\" onChange={onSubmit}/>\r\n        <button className=\"f6 link dim br3 ba ph3 pv2 mb2 dib black\" onClick={onBtn} >Go</button>\r\n        </div>\r\n    )\r\n}\r\nexport default SearchBar","import React from \"react\"\r\nlet Card=({City,temp,feels_like,temp_max,temp_min,weather})=>{\r\n    return(\r\n        <div className=\"  flex justify-center tc shadow-4   br3 \" >\r\n        <div className=\"ma2 pa2\">\r\n        <h3>{\"City\"}</h3>\r\n        <p>{City.name}</p>\r\n        <h3>{\"Temp\"}</h3>\r\n        <p>{temp }<span className=\"degree-symbol\"></span>C</p>\r\n        <h3>{\"Feels Like\"} </h3>\r\n        <p>{feels_like }<span className=\"degree-symbol\"></span>C</p>\r\n        </div>\r\n\r\n        <div className=\"ma2 pa2\">\r\n        <h3>TempMax</h3>\r\n        <p>{temp_max}<span className=\"degree-symbol\"></span>C</p>\r\n        <h3>TempMin</h3>\r\n        <p>{temp_min}<span className=\"degree-symbol\"></span>C</p>\r\n        <h3>Weather</h3>\r\n        <p>{weather}</p>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Card","import React, { Component } from 'react';\nimport SearchBar from \"./Components/SearchBar/SearchBar\"\nimport {City} from \"./City\"\nimport Card from \"./Components/Card/Card\"\nimport \"./App.css\"\n\nclass App extends Component{\n  constructor(){\n    super()\n    this.state={\n      searchfield:\"\",\n      City:[],\n      temp:\"\",\n      feels_like:\"\",\n      temp_max:\"\",\n      temp_min:\"\",\n      weather:\"\",\n    }\n  }\n\n  onSubmit=(event)=>{\n    this.setState({searchfield:event.target.value})\n  }\n  onBtn=(event)=>{\n     fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.searchfield}&appid=5d8142a7ce8ccb3bc6c598b67a2835f3`).then(response=>response.json())\n    .then((user)=>{\nthis.setState({City:user,\n  temp:Math.round(user.main.temp-273.15),\n\n  feels_like:Math.round(user.main.feels_like- 273.15),\n   temp_max:Math.round(user.main.temp_max- 273.15),\n    temp_min:Math.round(user.main.temp_min- 273.15),\n     weather:user.weather[0].description})\n\nconsole.log(this.state.City)\n    })\n\n    \n    \n  }\n  \n  render(){\n  return(\n    <div className=\"tc ma3\">\n    <h1>{\"WeatherCast\"}</h1>\n    <SearchBar onBtn={this.onBtn} onSubmit={this.onSubmit}/>\n    <Card City={this.state.City} temp={this.state.temp} feels_like={this.state.feels_like} temp_max={this.state.temp_max} temp_min={this.state.temp_min} weather={this.state.weather}  />\n  <footer>Made With  üòç By Dev</footer>\n    </div>\n  )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"tachyons\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}